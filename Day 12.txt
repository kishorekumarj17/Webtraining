Perfect! Here's a **detailed Day 12 React training plan** covering:

---

## 🗓️ **Day 12 Topics**

1. **`useEffect` Hook**
2. **Rendering Lists**
3. **Handling Forms**

Each topic includes:

* ✅ Clear explanation
* 📘 Examples
* 🧪 Hands-on demo ideas

---

## 1️⃣ `useEffect` Hook

### 🔍 What is it?

The `useEffect` hook allows you to perform **side effects** in function components.
Examples of side effects:

* Fetching data
* Updating the DOM
* Using timers
* Subscribing/unsubscribing to events

---

### 🧠 Syntax

```js
useEffect(() => {
  // side effect logic
  return () => {
    // optional cleanup
  };
}, [dependencies]);
```

---

### 🧪 Examples

#### 📌 Run once on component mount (like `componentDidMount`)

```js
useEffect(() => {
  console.log('Component mounted');
}, []);
```

#### 🔁 Run when specific state changes

```js
useEffect(() => {
  console.log('Count updated:', count);
}, [count]);
```

#### 🧹 Cleanup example

```js
useEffect(() => {
  const interval = setInterval(() => {
    console.log('Tick');
  }, 1000);

  return () => clearInterval(interval); // cleanup
}, []);
```

#### 🌐 Fetching data

```js
useEffect(() => {
  fetch("https://jsonplaceholder.typicode.com/users")
    .then(res => res.json())
    .then(data => setUsers(data));
}, []);
```

---

## 2️⃣ Rendering Lists

### 🔍 Why?

To display **multiple items** dynamically from an array.

---

### ✅ Basic Example

```js
const fruits = ['Apple', 'Banana', 'Mango'];

return (
  <ul>
    {fruits.map((fruit, index) => (
      <li key={index}>{fruit}</li>
    ))}
  </ul>
);
```

### ⚠️ Key Prop

Use a **unique `key` prop** to help React identify items efficiently.

---

### 🧪 More Complex Example

```js
const users = [
  { id: 1, name: 'Alice' },
  { id: 2, name: 'Bob' }
];

return (
  <div>
    {users.map(user => (
      <p key={user.id}>{user.name}</p>
    ))}
  </div>
);
```

---

## 3️⃣ Handling Forms in React

### 🔍 Controlled vs Uncontrolled

* **Controlled**: React manages input state
* **Uncontrolled**: DOM manages state (with `ref`)

---

### ✅ Controlled Form Example

```js
const [name, setName] = useState('');

return (
  <form onSubmit={(e) => { e.preventDefault(); alert(name); }}>
    <input
      type="text"
      value={name}
      onChange={(e) => setName(e.target.value)}
    />
    <button type="submit">Submit</button>
  </form>
);
```

---

### 🧪 Form with Multiple Inputs

```js
const [formData, setFormData] = useState({ email: '', password: '' });

const handleChange = (e) => {
  setFormData({
    ...formData,
    [e.target.name]: e.target.value
  });
};
```

```jsx
<form>
  <input name="email" onChange={handleChange} />
  <input name="password" onChange={handleChange} />
</form>
```

---

### 🧪 Select, Radio, and Checkbox

```jsx
<select value={gender} onChange={e => setGender(e.target.value)}>
  <option value="male">Male</option>
  <option value="female">Female</option>
</select>
```

```jsx
<input type="checkbox" checked={terms} onChange={() => setTerms(!terms)} />
```

---

## 🔧 Hands-On Exercise Ideas

### 1. 🧪 **User Fetch + List Display**

* Use `useEffect` to fetch data from an API
* Display list of user names with emails

### 2. 🧪 **React Feedback Form**

* Form inputs: name, email, feedback
* On submit, display a success message
* Highlight missing fields (optional)

### 3. 🧪 **Todo with useEffect**

* Track number of tasks added using `useEffect`
* Use form to add items

---

Would you like all of this in a **PDF** or **plain text file**? Or do you want a complete **live hands-on project code** for one of the exercises too?

Absolutely! Here's a clear example of an **uncontrolled form** in React using `ref`:

---

## 🧪 Uncontrolled Form Example

Unlike controlled forms (where state tracks inputs), in an **uncontrolled form**, the data is accessed directly from the **DOM** using a `ref`.

---

### ✅ Example Code:

```jsx
import React, { useRef } from 'react';

function UncontrolledForm() {
  const nameRef = useRef(null);
  const emailRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    const name = nameRef.current.value;
    const email = emailRef.current.value;

    alert(`Name: ${name}\nEmail: ${email}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Name:</label>
        <input type="text" ref={nameRef} />
      </div>
      <div>
        <label>Email:</label>
        <input type="email" ref={emailRef} />
      </div>
      <button type="submit">Submit</button>
    </form>
  );
}

export default UncontrolledForm;
```

---

### 🧠 Explanation:

* `useRef()` is used to create a reference to the input DOM nodes.
* `ref={nameRef}` attaches the reference to the input.
* On form submission, `nameRef.current.value` directly accesses the DOM value.
* This avoids React state management — hence **“uncontrolled.”**

---

Would you like this added to your **Day 12 PDF**, or would you like to try a **hands-on challenge** using uncontrolled inputs too?

