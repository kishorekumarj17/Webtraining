

## **Day 9: React + Vite + JSX + Components + Props**

---

### **1. React + Vite Project Folder and File Walkthrough**

When you create a new React project using Vite (`npm create vite@latest` with `react` template), you get the following structure:

```
my-app/
│
├── node_modules/          ← External packages installed via npm
├── public/                ← Static assets (e.g., favicon)
│   └── vite.svg
├── src/                   ← Your application source code
│   ├── App.jsx            ← Main component
│   ├── main.jsx           ← Renders App into DOM
│   └── index.css          ← App-level CSS
├── index.html             ← Main HTML file (only one in SPA)
├── vite.config.js         ← Vite configuration
├── package.json           ← Project metadata & scripts
└── README.md              ← Project info
```

📌 **Important Concepts:**

* `main.jsx` mounts `<App />` into the DOM.
* Vite provides super fast startup and HMR (Hot Module Replacement).
* You usually work inside the `src/` folder.

---

### **2. What is React?**

* A **JavaScript library** for building user interfaces.
* Developed and maintained by **Meta (Facebook)**.
* Uses **Virtual DOM** for efficient UI updates.
* Encourages **component-based architecture**.
* One-way **data flow** makes state easier to manage.

---

### **3. What is JSX?**

* JSX = **JavaScript + XML**
* Allows writing **HTML-like** code in JS.
* Under the hood, it is compiled into `React.createElement()`.

✅ **Rules of JSX**:

* Return a **single parent element**.
* Use `className` instead of `class`.
* Use `{}` to embed JS expressions.

Example:

```jsx
function Hello() {
  return <h1>Hello, {name}</h1>;
}
```

---

### **4. React Components – In Depth**

React Components are the **building blocks** of a React app.

#### ✅ Types of Components

##### a. Functional Components (Modern Way)

* Defined using **functions**.
* Can use **Hooks** (like `useState`, `useEffect`).
* More concise and preferred today.

```jsx
function Welcome() {
  return <h1>Hello, welcome!</h1>;
}
```

##### b. Class Components (Legacy)

* Defined using **ES6 class syntax**.
* Support **lifecycle methods**.
* Less commonly used in modern code.

```jsx
class Welcome extends React.Component {
  render() {
    return <h1>Hello, welcome!</h1>;
  }
}
```

---

### **5. Component Naming & Structure**

* Use **PascalCase** (`UserCard`, `LoginForm`).
* Must return a **single JSX element**.
* File name should match component name.
* Use `export` to make a component usable elsewhere.

```jsx
// UserCard.jsx
function UserCard() {
  return <div>User Info</div>;
}
export default UserCard;
```

---

### **6. Component Composition**

You can combine components to build more complex UIs.

```jsx
function Header() {
  return <header>My Site</header>;
}
function Footer() {
  return <footer>© 2025</footer>;
}
function App() {
  return (
    <div>
      <Header />
      <main>Page content</main>
      <Footer />
    </div>
  );
}
```

---

### **7. Props – In Detail**

**Props** (short for properties) are how components receive **data** from parent components.

* Props are **read-only**.
* Used to make components **dynamic** and **reusable**.

```jsx
function Greet({ name }) {
  return <h2>Hello, {name}</h2>;
}
<Greet name="Kishore" />
```

You can **destructure** props directly in the function parameters.

---

### **8. Default Props**

Assign default values to props:

```jsx
Greet.defaultProps = {
  name: "Guest"
};
```

---

### **9. Prop Types (Validation)**

You can use the `prop-types` package for prop validation:

```bash
npm install prop-types
```

```jsx
import PropTypes from 'prop-types';
Greet.propTypes = {
  name: PropTypes.string.isRequired
};
```

---

### **10. Children Prop**

Components can accept nested JSX using the special `children` prop.

```jsx
function Wrapper({ children }) {
  return <div className="box">{children}</div>;
}

<Wrapper>
  <p>This is inside the box</p>
</Wrapper>
```

---

### **11. Reusability & Maintainability**

* Components should be **reusable**, **isolated**, and **easy to test**.
* Break UI into smaller parts.
* Avoid mixing logic and UI.

---

### **12. Best Practices**

✅ Keep components small and single-purpose.
✅ Use `props` to make components dynamic.
✅ Avoid mutating props.
✅ Use `.jsx` or `.tsx` extensions.
✅ Comment complex logic when necessary.

---

### 🧠 Real-World Analogy

Think of components like **reusable recipe cards**.
Props are the **ingredients** that change the taste (output).

---

### 💻 Hands-On Task (Live Activity Idea)

**Build a reusable `UserCard` component**:

**Props**:

* `name`
* `role`
* `image` (URL)
* `bio`

**Display**:

* A profile card with name, avatar, short bio.

Render multiple cards with different data:

```jsx
<UserCard name="Kishore" role="Trainer" image="img1.jpg" bio="Loves teaching JS." />
<UserCard name="Anita" role="Student" image="img2.jpg" bio="Front-end enthusiast." />
```

---

Would you like me to convert this full content into a downloadable PDF again now?
